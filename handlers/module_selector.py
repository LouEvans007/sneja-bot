# handlers/module_selector.py
from telebot import types
from bot_instance import bot
from config import WEBSITE_URL
from handlers import menu_handler

# === –ë–∞–∑–∞ –º–æ–¥—É–ª–µ–π ===
MODULES_DB = {
    "data_loss": {
        "name": "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
        "category": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        "emoji": "üßπ",
        "metaphor": "–∫–∞–∫ —Å–æ–≤–æ–∫ –¥–ª—è –º—É—Å–æ—Ä–∞",
        "description": "–ù–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –∫–æ–º–ø–∞–Ω–∏–π, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏ —á–∏—Å—Ç–∏—Ç –±–∞–∑—É. –ß–∏—Å—Ç–∞—è CRM ‚Äî –º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫, –±–æ–ª—å—à–µ –¥–æ–≤–µ—Ä–∏—è.",
        "url": f"{WEBSITE_URL}/marketplace/68a3a5104ce252ca0ea1ec06"
    },
    "manual_work": {
        "name": "–ó–∞–¥–∞—á–∏",
        "category": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏",
        "emoji": "üìå",
        "metaphor": "–∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—É–¥–µ—Ç",
        "description": "–°—Ç–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å—ã –≤ kanban-–¥–æ—Å–∫–µ. –†–∞–±–æ—Ç–∞ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π.",
        "url": f"{WEBSITE_URL}/marketplace/68a3a8f04ce252ca0ea1ec0f"
    },
    "client_disorder": {
        "name": "–ü—Ä–æ–¥–∞–∂–∏",
        "category": "–ü—Ä–æ–¥–∞–∂–∏ –∏ CRM",
        "emoji": "üíº",
        "metaphor": "–∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–Ω–∏—Ç –≤—Å—ë",
        "description": "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–¥–µ–ª–∫–∞–º–∏ –æ—Ç –∑–∞—è–≤–∫–∏ –¥–æ –æ–ø–ª–∞—Ç—ã. –í–∏–¥–∏—Ç–µ –≤—Å–µ —ç—Ç–∞–ø—ã, —Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ö–ü, –≤—ã—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å—á—ë—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É.",
        "url": f"{WEBSITE_URL}/marketplace/68a23b9796a0224c964d1ff0"
    },
    "dev_dependence": {
        "name": "–í–µ–±-—Å–∞–π—Ç",
        "category": "–í–µ–±-—Å–∞–π—Ç",
        "emoji": "üåê",
        "metaphor": "–∫–∞–∫ –¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Å–∞–º–∏",
        "description": "–°–æ–∑–¥–∞–π—Ç–µ —Å–∞–π—Ç –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞. –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –±–ª–æ–∫–∏, –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ –±–ª–æ–≥. –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å ‚Äî –≤–∞—à —Å–µ—Ä–≤–µ—Ä, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
        "url": f"{WEBSITE_URL}/marketplace/689f8b1104440059e647bd48"
    },
    "dont_know_start": {
        "name": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
        "category": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
        "emoji": "üéØ",
        "metaphor": "–∫–∞–∫ –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–≤–∞–µ—Ç",
        "description": "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö, –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å email –∏ CRM. –ù–∏–∫–∞–∫–æ–≥–æ —Ö–∞–æ—Å–∞ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Ä—è–¥–æ–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
        "url": f"{WEBSITE_URL}/marketplace/68a3a0eb4ce252ca0ea1ebf3"
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥: –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ –¥–∏–∞–ª–æ–≥–µ –ø–æ–¥–±–æ—Ä–∞
waiting_for_pain = set()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫: "–ü–æ–¥–æ–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å" ===
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å")
def ask_pain_point(message):
    global waiting_for_pain

    bot.send_message(
        message.chat.id,
        "‚õÑ –°–Ω–µ–∂–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n\n"
        "–ö–∞–∫–∞—è –±–æ–ª—å —Å–µ–π—á–∞—Å —Å–∏–ª—å–Ω–µ–µ?\n\n"
        "1. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ç–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ\n"
        "2. –í—Å—ë –¥–µ–ª–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é\n"
        "3. –ù–µ—Ç –ø–æ—Ä—è–¥–∫–∞ –≤ –∫–ª–∏–µ–Ω—Ç–∞—Ö\n"
        "4. –ó–∞–≤–∏—Å–∏–º –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n"
        "5. –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å\n\n"
        "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É.",
    )
    waiting_for_pain.add(message.chat.id)


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ü–∏—Ñ—Ä—ã 1‚Äì5, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ===
@bot.message_handler(func=lambda message: message.text.strip() in ["1", "2", "3", "4", "5"])
def handle_pain_input(message):
    global waiting_for_pain

    if message.chat.id not in waiting_for_pain:
        # –≠—Ç–æ –Ω–µ —á–∞—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥–±–æ—Ä–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        return

    # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    waiting_for_pain.discard(message.chat.id)

    choice_map = {
        "1": "data_loss",
        "2": "manual_work",
        "3": "client_disorder",
        "4": "dev_dependence",
        "5": "dont_know_start"
    }

    chosen_key = choice_map[message.text.strip()]

    recommend_module(message.chat.id, chosen_key)


def recommend_module(chat_id, choice_key):
    module = MODULES_DB.get(choice_key)
    if not module:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–æ–¥—É–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    text = (
        f"{module['emoji']} –ü–æ–Ω—è–ª(–∞)! –¢–µ–±–µ –Ω—É–∂–µ–Ω –º–æ–¥—É–ª—å: *{module['name']}*\n\n"
        f"–û–Ω –∫–∞–∫ {module['metaphor']}:\n"
        f"‚ñ´Ô∏è {module['description']}\n\n"
        f"üéØ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ *{module['category']}*."
    )

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn_more = types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"more_{choice_key}")
    btn_site = types.InlineKeyboardButton("–ù–∞ —Å–∞–π—Ç", url=module["url"])
    btn_other = types.InlineKeyboardButton("–î—Ä—É–≥–æ–π –º–æ–¥—É–ª—å", callback_data="choose_another")
    keyboard.add(btn_more, btn_site)
    keyboard.add(btn_other)

    bot.send_message(
        chat_id,
        text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )


# === –ö–æ–ª–ª–±—ç–∫–∏ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("more_"))
def show_details(call):
    key = call.data.replace("more_", "")
    module = MODULES_DB.get(key)
    if not module:
        bot.answer_callback_query(call.id, "–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    full_text = (
        f"üìò –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–æ–¥—É–ª–µ *{module['name']}*\n\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {module['category']}\n"
        f"*–ß—Ç–æ —Ä–µ—à–∞–µ—Ç:* {module['description']}\n\n"
        f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ\n"
        f"‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏\n"
        f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏ –°–Ω–µ–≥ –∏ –∫–æ–º"
    )

    keyboard = types.InlineKeyboardMarkup()
    btn_site = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=module["url"])
    btn_menu = types.InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="main_menu")
    keyboard.add(btn_site)
    keyboard.add(btn_menu)

    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=full_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è] {e}")


@bot.callback_query_handler(func=lambda call: call.data == "choose_another")
def back_to_pain(call):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ö–∞–∫–∞—è –±–æ–ª—å —Å–µ–π—á–∞—Å —Å–∏–ª—å–Ω–µ–µ?\n\n"
                 "1. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ç–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ\n"
                 "2. –í—Å—ë –¥–µ–ª–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é\n"
                 "3. –ù–µ—Ç –ø–æ—Ä—è–¥–∫–∞ –≤ –∫–ª–∏–µ–Ω—Ç–∞—Ö\n"
                 "4. –ó–∞–≤–∏—Å–∏–º –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n"
                 "5. –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å\n\n"
                 "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É.",
        )
        waiting_for_pain.add(call.message.chat.id)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] {e}")
